// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCore.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NetCore.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210801093325_add-dynamic-config")]
    partial class adddynamicconfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("NetCore.Data.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid")
                        .HasMaxLength(128);

                    b.Property<string>("OrganizationName")
                        .HasColumnName("organization_name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("PositionId")
                        .HasColumnName("position_id")
                        .HasColumnType("uuid")
                        .HasMaxLength(128);

                    b.Property<string>("PositionName")
                        .HasColumnName("position_name")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid")
                        .HasMaxLength(128);

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("NetCore.Data.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("NetCore.Data.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("district");
                });

            modelBuilder.Entity("NetCore.Data.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Document3rdId")
                        .HasColumnName("document_3rd_id")
                        .HasColumnType("text");

                    b.Property<Guid?>("DocumentBatchId")
                        .HasColumnName("document_batch_id")
                        .HasColumnType("uuid");

                    b.Property<int>("DocumentStatus")
                        .HasColumnName("document_status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaDataJson")
                        .HasColumnName("meta_data_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("NextStepId")
                        .HasColumnName("next_step_id")
                        .HasColumnType("uuid");

                    b.Property<int>("NextStepSignType")
                        .HasColumnName("next_step_sign_type")
                        .HasColumnType("integer");

                    b.Property<string>("NextStepUserEmail")
                        .HasColumnName("next_step_user_email")
                        .HasColumnType("text");

                    b.Property<Guid?>("NextStepUserId")
                        .HasColumnName("next_step_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("NextStepUserName")
                        .HasColumnName("next_step_user_name")
                        .HasColumnType("text");

                    b.Property<string>("NextStepUserPhoneNumber")
                        .HasColumnName("next_step_user_phone_number")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("WorkFlowUserJson")
                        .HasColumnName("workflow_user_json")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnName("workflow_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WorkflowStartDate")
                        .HasColumnName("workflow_start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocumentBatchId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("document");
                });

            modelBuilder.Entity("NetCore.Data.DocumentBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("uuid");

                    b.Property<long>("IdentityNumber")
                        .HasColumnName("identity_number")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGenerateFile")
                        .HasColumnName("is_generateFile")
                        .HasColumnType("boolean");

                    b.Property<string>("ListMetaDataJson")
                        .HasColumnName("list_meta_data_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("NumberOfEmailPerWeek")
                        .HasColumnName("number_of_email_per_week")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<string>("WorkFlowUserJson")
                        .HasColumnName("workflow_contact_json")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnName("workflow_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("document_batch");
                });

            modelBuilder.Entity("NetCore.Data.DocumentBatchFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentBatchId")
                        .HasColumnName("document_batch_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentFileTemplateId")
                        .HasColumnName("document_file_template_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FileBucketName")
                        .HasColumnName("file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<string>("FileObjectName")
                        .HasColumnName("file_object_name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentBatchId");

                    b.HasIndex("DocumentFileTemplateId");

                    b.ToTable("document_batch_file");
                });

            modelBuilder.Entity("NetCore.Data.DocumentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentFileTemplateId")
                        .HasColumnName("document_file_template_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnName("document_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FileBucketName")
                        .HasColumnName("file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<string>("FileObjectName")
                        .HasColumnName("file_object_name")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("integer");

                    b.Property<string>("HashFile")
                        .HasColumnName("hash_file")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("ProfileName")
                        .HasColumnName("profile_name")
                        .HasColumnType("text");

                    b.Property<string>("XMLFile")
                        .HasColumnName("xml_file")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("document_file");
                });

            modelBuilder.Entity("NetCore.Data.DocumentFileTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentTemplateId")
                        .HasColumnName("document_template_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FileBucketName")
                        .HasColumnName("file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<string>("FileObjectName")
                        .HasColumnName("file_object_name")
                        .HasColumnType("text");

                    b.Property<string>("MetaDataConfigJson")
                        .HasColumnName("meta_data_config_json")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("ProfileName")
                        .HasColumnName("profile_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTemplateId");

                    b.ToTable("document_file_template");
                });

            modelBuilder.Entity("NetCore.Data.DocumentMetaDataConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentTemplateId")
                        .HasColumnName("document_template_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MetaDataId")
                        .HasColumnName("meta_data_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTemplateId");

                    b.HasIndex("MetaDataId");

                    b.ToTable("document_meta_data_config");
                });

            modelBuilder.Entity("NetCore.Data.DocumentSignHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentFileId")
                        .HasColumnName("document_file_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnName("document_id")
                        .HasColumnType("uuid");

                    b.Property<int>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("integer");

                    b.Property<string>("NewFileBucketName")
                        .HasColumnName("new_file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("NewFileName")
                        .HasColumnName("new_file_name")
                        .HasColumnType("text");

                    b.Property<string>("NewFileObjectName")
                        .HasColumnName("new_file_object_name")
                        .HasColumnType("text");

                    b.Property<string>("NewHashFile")
                        .HasColumnName("new_hash_file")
                        .HasColumnType("text");

                    b.Property<string>("NewXMLFile")
                        .HasColumnName("new_xml_file")
                        .HasColumnType("text");

                    b.Property<string>("OldFileBucketName")
                        .HasColumnName("old_file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("OldFileName")
                        .HasColumnName("old_file_name")
                        .HasColumnType("text");

                    b.Property<string>("OldFileObjectName")
                        .HasColumnName("old_file_object_name")
                        .HasColumnType("text");

                    b.Property<string>("OldHashFile")
                        .HasColumnName("old_hash_file")
                        .HasColumnType("text");

                    b.Property<string>("OldXMLFile")
                        .HasColumnName("old_xml_file")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("document_sign_history");
                });

            modelBuilder.Entity("NetCore.Data.DocumentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("document_template");
                });

            modelBuilder.Entity("NetCore.Data.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("document_type");
                });

            modelBuilder.Entity("NetCore.Data.EmailAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnName("from")
                        .HasColumnType("text");

                    b.Property<long>("IdentityNumber")
                        .HasColumnName("identity_number")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnName("port")
                        .HasColumnType("integer");

                    b.Property<string>("SendType")
                        .HasColumnName("send_type")
                        .HasColumnType("text");

                    b.Property<string>("Smtp")
                        .HasColumnName("smtp")
                        .HasColumnType("text");

                    b.Property<bool>("Ssl")
                        .HasColumnName("ssl")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("User")
                        .HasColumnName("user")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("email_account");
                });

            modelBuilder.Entity("NetCore.Data.MetaData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("DataType")
                        .HasColumnName("data_type")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRequire")
                        .HasColumnName("is_require")
                        .HasColumnType("boolean");

                    b.Property<string>("ListDataJson")
                        .HasColumnName("list_data_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("meta_data");
                });

            modelBuilder.Entity("NetCore.Data.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .HasColumnName("country_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("IdentifyNumber")
                        .HasColumnName("identify_number")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuerBy")
                        .HasColumnName("issuer_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IssuerDate")
                        .HasColumnName("issuer_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("uuid");

                    b.Property<string>("ProvinceName")
                        .HasColumnName("province_name")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("TaxCode")
                        .HasColumnName("tax_code")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("organization");
                });

            modelBuilder.Entity("NetCore.Data.OrganizationConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("BucketName")
                        .HasColumnName("bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("CallbackAuthorizationUrl")
                        .HasColumnName("callback_authorization_url")
                        .HasColumnType("text");

                    b.Property<string>("CallbackUrl")
                        .HasColumnName("callback_url")
                        .HasColumnType("text");

                    b.Property<string>("ConsumerKey")
                        .HasColumnName("consumer_key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultRequestCallBackAuthorizationHeadersJson")
                        .HasColumnName("default_request_callback_authorization_headers_json")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequestCallbackHeadersJson")
                        .HasColumnName("default_request_callback_headers_json")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequestSMSAuthorizationHeadersJson")
                        .HasColumnName("default_request_sms_authorization_headers_json")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequestSMSHeadersJson")
                        .HasColumnName("default_request_sms_headers_json")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("EmailConfigJson")
                        .HasColumnName("email_config_json")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproveCertify")
                        .HasColumnName("is_approve_certify")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproveLTV")
                        .HasColumnName("is_approve_ltv")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproveTSA")
                        .HasColumnName("is_approve_tsa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCallbackAuthorization")
                        .HasColumnName("is_callback_authorization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSMSAuthorization")
                        .HasColumnName("is_sms_authorization")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxDocumentType")
                        .HasColumnName("max_document_type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("ObjectName")
                        .HasColumnName("object_name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationTitle")
                        .HasColumnName("organization_title")
                        .HasColumnType("text");

                    b.Property<string>("SMSAuthorizationUrl")
                        .HasColumnName("sms_authorization_url")
                        .HasColumnType("text");

                    b.Property<string>("SMSConfigJson")
                        .HasColumnName("sms_config_json")
                        .HasColumnType("text");

                    b.Property<string>("SMSOTPTemplate")
                        .HasColumnName("sms_otp_template")
                        .HasColumnType("text");

                    b.Property<int>("SMSType")
                        .HasColumnName("sms_type")
                        .HasColumnType("integer");

                    b.Property<string>("SMSUrl")
                        .HasColumnName("sms_url")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<int>("TemplatePerDocumentType")
                        .HasColumnName("template_per_document_type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("organization_config");
                });

            modelBuilder.Entity("NetCore.Data.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("position");
                });

            modelBuilder.Entity("NetCore.Data.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<Guid?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("province");
                });

            modelBuilder.Entity("NetCore.Data.QueueSendEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Base64Image")
                        .HasColumnName("base64_image")
                        .HasColumnType("text");

                    b.Property<string>("BccEmailsJson")
                        .HasColumnName("bcc_emails_json")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<string>("CCEmailsJson")
                        .HasColumnName("cc_emails_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("EmailAccountId")
                        .HasColumnName("email_account_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSended")
                        .HasColumnName("is_sended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<string>("ToEmailsJson")
                        .HasColumnName("to_emails_json")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("queue_send_email");
                });

            modelBuilder.Entity("NetCore.Data.SystemApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("system_appliation");
                });

            modelBuilder.Entity("NetCore.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ConnectId")
                        .HasColumnName("connect_id")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .HasColumnName("country_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("IdentityNumber")
                        .HasColumnName("identity_number")
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .HasColumnName("identity_type")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnableSmartOTP")
                        .HasColumnName("is_enable_smart_otp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLock")
                        .HasColumnName("is_lock")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuerBy")
                        .HasColumnName("issuer_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IssuerDate")
                        .HasColumnName("issuer_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnName("last_activity_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("password_salt")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PositionName")
                        .HasColumnName("position_name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("uuid");

                    b.Property<string>("ProvinceName")
                        .HasColumnName("province_name")
                        .HasColumnType("text");

                    b.Property<int?>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("NetCore.Data.UserHSMAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserPIN")
                        .HasColumnName("user_pin")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_hsm_account");
                });

            modelBuilder.Entity("NetCore.Data.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsOrgAdmin")
                        .HasColumnName("is_org_admin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnName("is_system_admin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUser")
                        .HasColumnName("is_user")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("NetCore.Data.UserSignConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("AppearenceSignType")
                        .IsRequired()
                        .HasColumnName("appearance_sign_type")
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<long>("IdentityNumber")
                        .HasColumnName("identity_number")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageFileBase64")
                        .HasColumnName("image_file_base64")
                        .HasColumnType("text");

                    b.Property<bool>("IsSignDefault")
                        .HasColumnName("is_sign_default")
                        .HasColumnType("boolean");

                    b.Property<string>("ListSignInfoJson")
                        .HasColumnName("list_sign_info_json")
                        .HasColumnType("text");

                    b.Property<string>("LogoFileBase64")
                        .HasColumnName("logo_file_base64")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<float>("ScaleImage")
                        .HasColumnName("scale_image")
                        .HasColumnType("real");

                    b.Property<float>("ScaleLogo")
                        .HasColumnName("scale_logo")
                        .HasColumnType("real");

                    b.Property<float>("ScaleText")
                        .HasColumnName("scale_text")
                        .HasColumnType("real");

                    b.Property<bool>("SignAppearanceImage")
                        .HasColumnName("sign_appearance_image")
                        .HasColumnType("boolean");

                    b.Property<bool>("SignAppearanceLogo")
                        .HasColumnName("sign_appearance_logo")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_sign_config");
                });

            modelBuilder.Entity("NetCore.Data.VSMSSendQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsPush")
                        .HasColumnName("is_push")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<string>("SendSMSResponseJson")
                        .HasColumnName("send_sms_response_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnName("sent_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SourceAddr")
                        .HasColumnName("source_addr")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("vsms_send_queue");
                });

            modelBuilder.Entity("NetCore.Data.Ward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnName("disctrict_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("ward");
                });

            modelBuilder.Entity("NetCore.Data.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid")
                        .HasMaxLength(128);

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("workflow");
                });

            modelBuilder.Entity("NetCore.Data.WorkflowDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentId")
                        .HasColumnName("document_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnName("workflow_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("workflow_document");
                });

            modelBuilder.Entity("NetCore.Data.WorkflowDocumentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsApprove")
                        .HasColumnName("is_apporve")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowDocumentId")
                        .HasColumnName("workflow_document_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowDocumentId");

                    b.ToTable("workflow_history");
                });

            modelBuilder.Entity("NetCore.Data.WorkflowUserSign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConsentSignConfigJson")
                        .HasColumnName("consent_sign_config_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAutoSign")
                        .HasColumnName("is_auto_sign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendMailNotiResult")
                        .HasColumnName("is_send_mail_noti_result")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendMailNotiSign")
                        .HasColumnName("is_send_mail_noti_sign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendOTPNotiSign")
                        .HasColumnName("is_send_otp_noti_sign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignCertify")
                        .HasColumnName("is_sign_certify")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignLTV")
                        .HasColumnName("is_sign_ltv")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignTSA")
                        .HasColumnName("is_sign_tsa")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnName("workflow_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("workflow_user_sign");
                });

            modelBuilder.Entity("NetCore.Data.District", b =>
                {
                    b.HasOne("NetCore.Data.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("NetCore.Data.Document", b =>
                {
                    b.HasOne("NetCore.Data.DocumentBatch", "DocumentBatch")
                        .WithMany()
                        .HasForeignKey("DocumentBatchId");

                    b.HasOne("NetCore.Data.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");
                });

            modelBuilder.Entity("NetCore.Data.DocumentBatch", b =>
                {
                    b.HasOne("NetCore.Data.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");
                });

            modelBuilder.Entity("NetCore.Data.DocumentBatchFile", b =>
                {
                    b.HasOne("NetCore.Data.DocumentBatch", "DocumentBatch")
                        .WithMany()
                        .HasForeignKey("DocumentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.DocumentFileTemplate", "DocumentFileTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentFileTemplateId");
                });

            modelBuilder.Entity("NetCore.Data.DocumentFile", b =>
                {
                    b.HasOne("NetCore.Data.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.DocumentFileTemplate", b =>
                {
                    b.HasOne("NetCore.Data.DocumentTemplate", "DocumentTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.DocumentMetaDataConfig", b =>
                {
                    b.HasOne("NetCore.Data.DocumentTemplate", "DocumentTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.MetaData", "MetaData")
                        .WithMany()
                        .HasForeignKey("MetaDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.DocumentTemplate", b =>
                {
                    b.HasOne("NetCore.Data.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.Province", b =>
                {
                    b.HasOne("NetCore.Data.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("NetCore.Data.QueueSendEmail", b =>
                {
                    b.HasOne("NetCore.Data.EmailAccount", "EmailAccount")
                        .WithMany("QueueSendEmails")
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.User", b =>
                {
                    b.HasOne("NetCore.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("NetCore.Data.UserHSMAccount", b =>
                {
                    b.HasOne("NetCore.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.UserSignConfig", b =>
                {
                    b.HasOne("NetCore.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.Ward", b =>
                {
                    b.HasOne("NetCore.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("NetCore.Data.WorkflowDocument", b =>
                {
                    b.HasOne("NetCore.Data.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.WorkflowDocumentHistory", b =>
                {
                    b.HasOne("NetCore.Data.WorkflowDocument", "WorkflowDocument")
                        .WithMany()
                        .HasForeignKey("WorkflowDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.WorkflowUserSign", b =>
                {
                    b.HasOne("NetCore.Data.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
