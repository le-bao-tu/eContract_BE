// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCore.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NetCore.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211214043720_menu-role-right")]
    partial class menuroleright
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("NetCore.Data.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("NetCore.Data.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("district");
                });

            modelBuilder.Entity("NetCore.Data.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("BucketName")
                        .HasColumnName("bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Document3rdId")
                        .HasColumnName("document_3rd_id")
                        .HasColumnType("text");

                    b.Property<Guid?>("DocumentBatchId")
                        .HasColumnName("document_batch_id")
                        .HasColumnType("uuid");

                    b.Property<int>("DocumentStatus")
                        .HasColumnName("document_status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("FileNamePrefix")
                        .HasColumnName("file_name_prefix")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastReasonReject")
                        .HasColumnName("last_reason_reject")
                        .HasColumnType("text");

                    b.Property<string>("ListEmailReceptionJson")
                        .HasColumnName("list_email_reception_json")
                        .HasColumnType("text");

                    b.Property<string>("MetaDataJson")
                        .HasColumnName("meta_data_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("NextStepId")
                        .HasColumnName("next_step_id")
                        .HasColumnType("uuid");

                    b.Property<int>("NextStepSignType")
                        .HasColumnName("next_step_sign_type")
                        .HasColumnType("integer");

                    b.Property<string>("NextStepUserEmail")
                        .HasColumnName("next_step_user_email")
                        .HasColumnType("text");

                    b.Property<Guid?>("NextStepUserId")
                        .HasColumnName("next_step_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("NextStepUserName")
                        .HasColumnName("next_step_user_name")
                        .HasColumnType("text");

                    b.Property<string>("NextStepUserPhoneNumber")
                        .HasColumnName("next_step_user_phone_number")
                        .HasColumnType("text");

                    b.Property<string>("ObjectNameDirectory")
                        .HasColumnName("object_name_directory")
                        .HasColumnType("text");

                    b.Property<string>("OneTimePassCode")
                        .HasColumnName("one_time_pass_code")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PassCodeExpireDate")
                        .HasColumnName("pass_code_expire_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("RequestSignAtDate")
                        .HasColumnName("request_sign_at_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SignCompleteAtDate")
                        .HasColumnName("sign_complete_at_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SignExpireAtDate")
                        .HasColumnName("sign_expire_at_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("StateId")
                        .HasColumnName("state_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkFlowUserJson")
                        .HasColumnName("workflow_user_json")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnName("workflow_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("WorkflowStartDate")
                        .HasColumnName("workflow_start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocumentBatchId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("document");
                });

            modelBuilder.Entity("NetCore.Data.DocumentBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("DocumentBatch3rdId")
                        .HasColumnName("document_batch_3rd_id")
                        .HasColumnType("text");

                    b.Property<Guid?>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("uuid");

                    b.Property<long>("IdentityNumber")
                        .HasColumnName("identity_number")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGenerateFile")
                        .HasColumnName("is_generateFile")
                        .HasColumnType("boolean");

                    b.Property<string>("ListMetaDataJson")
                        .HasColumnName("list_meta_data_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("NumberOfEmailPerWeek")
                        .HasColumnName("number_of_email_per_week")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<string>("WorkFlowUserJson")
                        .HasColumnName("workflow_contact_json")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnName("workflow_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("document_batch");
                });

            modelBuilder.Entity("NetCore.Data.DocumentBatchFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentBatchId")
                        .HasColumnName("document_batch_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentFileTemplateId")
                        .HasColumnName("document_file_template_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FileBucketName")
                        .HasColumnName("file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<string>("FileObjectName")
                        .HasColumnName("file_object_name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentBatchId");

                    b.HasIndex("DocumentFileTemplateId");

                    b.ToTable("document_batch_file");
                });

            modelBuilder.Entity("NetCore.Data.DocumentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentFileTemplateId")
                        .HasColumnName("document_file_template_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnName("document_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FileBucketName")
                        .HasColumnName("file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<string>("FileObjectName")
                        .HasColumnName("file_object_name")
                        .HasColumnType("text");

                    b.Property<string>("FilePreviewBucketName")
                        .HasColumnName("file_preview_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("FilePreviewObjectName")
                        .HasColumnName("file_preview_object_name")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("integer");

                    b.Property<string>("HashFile")
                        .HasColumnName("hash_file")
                        .HasColumnType("text");

                    b.Property<string>("ImagePreviewJson")
                        .HasColumnName("image_preview_json")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("ProfileName")
                        .HasColumnName("profile_name")
                        .HasColumnType("text");

                    b.Property<string>("XMLFile")
                        .HasColumnName("xml_file")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("document_file");
                });

            modelBuilder.Entity("NetCore.Data.DocumentFileTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentTemplateId")
                        .HasColumnName("document_template_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FileBucketName")
                        .HasColumnName("file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("FileDataBucketName")
                        .HasColumnName("file_data_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("FileDataObjectName")
                        .HasColumnName("file_data_object_name")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<string>("FileObjectName")
                        .HasColumnName("file_object_name")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("integer");

                    b.Property<string>("MetaDataConfigJson")
                        .HasColumnName("meta_data_config_json")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("ProfileName")
                        .HasColumnName("profile_name")
                        .HasColumnType("text");

                    b.Property<string>("SignPositionConfigJson")
                        .HasColumnName("sign_position_config_json")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTemplateId");

                    b.ToTable("document_file_template");
                });

            modelBuilder.Entity("NetCore.Data.DocumentMetaDataConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DocumentTemplateId")
                        .HasColumnName("document_template_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MetaDataId")
                        .HasColumnName("meta_data_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTemplateId");

                    b.HasIndex("MetaDataId");

                    b.ToTable("document_meta_data_config");
                });

            modelBuilder.Entity("NetCore.Data.DocumentNotifySchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentCode")
                        .HasColumnName("document_code")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentId")
                        .HasColumnName("document_id")
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentName")
                        .HasColumnName("document_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsSend")
                        .HasColumnName("is_send")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("NotifyConfigExpireId")
                        .HasColumnName("notify_config_expire_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NotifyConfigRemindId")
                        .HasColumnName("notify_config_remind_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SendedRemindAtDate")
                        .HasColumnName("sended_remind_at_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SignExpireAtDate")
                        .HasColumnName("sign_expire_at_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotifyConfigExpireId");

                    b.HasIndex("NotifyConfigRemindId");

                    b.HasIndex("UserId");

                    b.ToTable("document_notify_schedule");
                });

            modelBuilder.Entity("NetCore.Data.DocumentSignHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentFileId")
                        .HasColumnName("document_file_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnName("document_id")
                        .HasColumnType("uuid");

                    b.Property<int>("FileType")
                        .HasColumnName("file_type")
                        .HasColumnType("integer");

                    b.Property<string>("NewFileBucketName")
                        .HasColumnName("new_file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("NewFileName")
                        .HasColumnName("new_file_name")
                        .HasColumnType("text");

                    b.Property<string>("NewFileObjectName")
                        .HasColumnName("new_file_object_name")
                        .HasColumnType("text");

                    b.Property<string>("NewHashFile")
                        .HasColumnName("new_hash_file")
                        .HasColumnType("text");

                    b.Property<string>("NewXMLFile")
                        .HasColumnName("new_xml_file")
                        .HasColumnType("text");

                    b.Property<string>("OldFileBucketName")
                        .HasColumnName("old_file_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("OldFileName")
                        .HasColumnName("old_file_name")
                        .HasColumnType("text");

                    b.Property<string>("OldFileObjectName")
                        .HasColumnName("old_file_object_name")
                        .HasColumnType("text");

                    b.Property<string>("OldHashFile")
                        .HasColumnName("old_hash_file")
                        .HasColumnType("text");

                    b.Property<string>("OldXMLFile")
                        .HasColumnName("old_xml_file")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("document_sign_history");
                });

            modelBuilder.Entity("NetCore.Data.DocumentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnName("from_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MetaDataConfigJson")
                        .HasColumnName("meta_data_config_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnName("to_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("document_template");
                });

            modelBuilder.Entity("NetCore.Data.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("document_type");
                });

            modelBuilder.Entity("NetCore.Data.DocumentWorkflowHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentId")
                        .HasColumnName("document_id")
                        .HasColumnType("uuid");

                    b.Property<int>("DocumentStatus")
                        .HasColumnName("document_status")
                        .HasColumnType("integer");

                    b.Property<string>("ListDocumentFileJson")
                        .HasColumnName("list_document_file_json")
                        .HasColumnType("text");

                    b.Property<string>("ReasonReject")
                        .HasColumnName("reason_reject")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("document_workflow_history");
                });

            modelBuilder.Entity("NetCore.Data.EmailAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnName("from")
                        .HasColumnType("text");

                    b.Property<long>("IdentityNumber")
                        .HasColumnName("identity_number")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnName("port")
                        .HasColumnType("integer");

                    b.Property<string>("SendType")
                        .HasColumnName("send_type")
                        .HasColumnType("text");

                    b.Property<string>("Smtp")
                        .HasColumnName("smtp")
                        .HasColumnType("text");

                    b.Property<bool>("Ssl")
                        .HasColumnName("ssl")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("User")
                        .HasColumnName("user")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("email_account");
                });

            modelBuilder.Entity("NetCore.Data.MetaData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("DataType")
                        .HasColumnName("data_type")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRequire")
                        .HasColumnName("is_require")
                        .HasColumnType("boolean");

                    b.Property<string>("ListDataJson")
                        .HasColumnName("list_data_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("meta_data");
                });

            modelBuilder.Entity("NetCore.Data.Navigation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("HideInBreadcrumb")
                        .HasColumnName("hide_in_breadcrumb")
                        .HasColumnType("boolean");

                    b.Property<string>("I18nName")
                        .IsRequired()
                        .HasColumnName("i18n_name")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnName("icon")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnName("link")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .IsRequired()
                        .HasColumnName("parent_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("navigation");
                });

            modelBuilder.Entity("NetCore.Data.NavigationMapRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NavigationId")
                        .HasColumnName("navigation_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NavigationId");

                    b.HasIndex("RoleId");

                    b.ToTable("navigation_map_role");
                });

            modelBuilder.Entity("NetCore.Data.NotifyConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<int?>("DaySendNotiBefore")
                        .HasColumnName("day_send_noti_before")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("EmailBodyTemplate")
                        .HasColumnName("email_body_template")
                        .HasColumnType("text");

                    b.Property<string>("EmailTitleTemplate")
                        .HasColumnName("email_title_template")
                        .HasColumnType("text");

                    b.Property<bool>("IsRepeat")
                        .HasColumnName("is_repeate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendEmail")
                        .HasColumnName("is_send_email")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendNotification")
                        .HasColumnName("is_send_notification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendSMS")
                        .HasColumnName("is_send_sms")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("NotificationBodyTemplate")
                        .HasColumnName("notification_body_template")
                        .HasColumnType("text");

                    b.Property<string>("NotificationTitleTemplate")
                        .HasColumnName("notification_title_template")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("SMSTemplate")
                        .HasColumnName("sms_template")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("TimeSendNotify")
                        .HasColumnName("time_send_notify")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("notify_config");
                });

            modelBuilder.Entity("NetCore.Data.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("BussinessLicenseBucketName")
                        .HasColumnName("bussiness_license_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("BussinessLicenseObjectName")
                        .HasColumnName("bussiness_license_object_name")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .HasColumnName("country_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("uuid");

                    b.Property<string>("DistrictName")
                        .HasColumnName("district_name")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("IdentifyNumber")
                        .HasColumnName("identify_number")
                        .HasColumnType("text");

                    b.Property<string>("IdentityBackBucketName")
                        .HasColumnName("identity_back_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("IdentityBackObjectName")
                        .HasColumnName("identity_back_object_name")
                        .HasColumnType("text");

                    b.Property<string>("IdentityFrontBucketName")
                        .HasColumnName("identity_front_bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("IdentityFrontObjectName")
                        .HasColumnName("identity_front_object_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuerBy")
                        .HasColumnName("issuer_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IssuerDate")
                        .HasColumnName("issuer_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("OU")
                        .HasColumnName("ou")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationTypeId")
                        .HasColumnName("organization_type_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("uuid");

                    b.Property<string>("ProvinceName")
                        .HasColumnName("province_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RepresentationBirthday")
                        .HasColumnName("repre_birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RepresentationCountryCode")
                        .HasColumnName("repre_country_code")
                        .HasColumnType("text");

                    b.Property<Guid?>("RepresentationCountryId")
                        .HasColumnName("repre_country_id")
                        .HasColumnType("uuid");

                    b.Property<string>("RepresentationCountryName")
                        .HasColumnName("repre_country_name")
                        .HasColumnType("text");

                    b.Property<string>("RepresentationCurentAddess")
                        .HasColumnName("repre_current_address")
                        .HasColumnType("text");

                    b.Property<string>("RepresentationEmail")
                        .HasColumnName("repre_email")
                        .HasColumnType("text");

                    b.Property<string>("RepresentationFullName")
                        .HasColumnName("repre_full_name")
                        .HasColumnType("text");

                    b.Property<string>("RepresentationIdentityNumber")
                        .HasColumnName("repre_identity_number")
                        .HasColumnType("text");

                    b.Property<string>("RepresentationIssueBy")
                        .HasColumnName("repre_issueby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RepresentationIssueDate")
                        .HasColumnName("repre_issue_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RepresentationPermanentAddress")
                        .HasColumnName("repre_permanent_address")
                        .HasColumnType("text");

                    b.Property<string>("RepresentationPhoneNumber")
                        .HasColumnName("repre_phone_number")
                        .HasColumnType("text");

                    b.Property<string>("RepresentationPositionLine1")
                        .HasColumnName("repre_position_line1")
                        .HasColumnType("text");

                    b.Property<string>("RepresentationPositionLine2")
                        .HasColumnName("repre_position_line2")
                        .HasColumnType("text");

                    b.Property<string>("RepresentationProvinceCode")
                        .HasColumnName("repre_province_code")
                        .HasColumnType("text");

                    b.Property<Guid?>("RepresentationProvinceId")
                        .HasColumnName("repre_province_id")
                        .HasColumnType("uuid");

                    b.Property<string>("RepresentationProvinceName")
                        .HasColumnName("repre_province_name")
                        .HasColumnType("text");

                    b.Property<int?>("RepresentationSex")
                        .HasColumnName("repre_sex")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasColumnName("short_name")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("TaxCode")
                        .HasColumnName("tax_code")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("organization");
                });

            modelBuilder.Entity("NetCore.Data.OrganizationConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("CallbackAuthorizationUrl")
                        .HasColumnName("callback_authorization_url")
                        .HasColumnType("text");

                    b.Property<string>("CallbackUrl")
                        .HasColumnName("callback_url")
                        .HasColumnType("text");

                    b.Property<string>("ConfirmDigitalSignatureDocumentTypeCode")
                        .HasColumnName("confirm_digital_signature_document_type_code")
                        .HasColumnType("text");

                    b.Property<string>("ConsumerKey")
                        .HasColumnName("consumer_key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultRequestCallBackAuthorizationHeadersJson")
                        .HasColumnName("default_request_callback_authorization_headers_json")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequestCallbackHeadersJson")
                        .HasColumnName("default_request_callback_headers_json")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequestSMSAuthorizationHeadersJson")
                        .HasColumnName("default_request_sms_authorization_headers_json")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequestSMSHeadersJson")
                        .HasColumnName("default_request_sms_headers_json")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int>("EFormConfig")
                        .HasColumnName("eform_config")
                        .HasColumnType("integer");

                    b.Property<string>("EmailConfigJson")
                        .HasColumnName("email_config_json")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproveCertify")
                        .HasColumnName("is_approve_certify")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproveLTV")
                        .HasColumnName("is_approve_ltv")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproveSignDynamicPosition")
                        .HasColumnName("is_approve_sign_dynamic_position")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproveTSA")
                        .HasColumnName("is_approve_tsa")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCallbackAuthorization")
                        .HasColumnName("is_callback_authorization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSMSAuthorization")
                        .HasColumnName("is_sms_authorization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUseUI")
                        .HasColumnName("is_use_ui")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoFileBase64")
                        .HasColumnName("logo_file_base64")
                        .HasColumnType("text");

                    b.Property<int>("MaxDocumentType")
                        .HasColumnName("max_document_type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("NotifySendType")
                        .HasColumnName("notify_send_type")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationTitle")
                        .HasColumnName("organization_title")
                        .HasColumnType("text");

                    b.Property<string>("RequestCertificateDocumentTypeCode")
                        .HasColumnName("request_certificate_document_type_code")
                        .HasColumnType("text");

                    b.Property<string>("SMSAuthorizationUrl")
                        .HasColumnName("sms_authorization_url")
                        .HasColumnType("text");

                    b.Property<string>("SMSConfigJson")
                        .HasColumnName("sms_config_json")
                        .HasColumnType("text");

                    b.Property<string>("SMSOTPTemplate")
                        .HasColumnName("sms_otp_template")
                        .HasColumnType("text");

                    b.Property<int>("SMSSendType")
                        .HasColumnName("sms_send_type")
                        .HasColumnType("integer");

                    b.Property<string>("SMSUrl")
                        .HasColumnName("sms_url")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<int>("TemplatePerDocumentType")
                        .HasColumnName("template_per_document_type")
                        .HasColumnType("integer");

                    b.Property<string>("UserNamePrefix")
                        .HasColumnName("user_name_prefix")
                        .HasColumnType("text");

                    b.Property<string>("UserStoreIDP")
                        .HasColumnName("user_store_idp")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("organization_config");
                });

            modelBuilder.Entity("NetCore.Data.OrganizationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("organization_type");
                });

            modelBuilder.Entity("NetCore.Data.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("position");
                });

            modelBuilder.Entity("NetCore.Data.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<Guid?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("province");
                });

            modelBuilder.Entity("NetCore.Data.QueueSendEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Base64Image")
                        .HasColumnName("base64_image")
                        .HasColumnType("text");

                    b.Property<string>("BccEmailsJson")
                        .HasColumnName("bcc_emails_json")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<string>("CCEmailsJson")
                        .HasColumnName("cc_emails_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("EmailAccountId")
                        .HasColumnName("email_account_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSended")
                        .HasColumnName("is_sended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<string>("ToEmailsJson")
                        .HasColumnName("to_emails_json")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("queue_send_email");
                });

            modelBuilder.Entity("NetCore.Data.Right", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnName("group-name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("right");
                });

            modelBuilder.Entity("NetCore.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("role");
                });

            modelBuilder.Entity("NetCore.Data.RoleMapDocumentOfOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_map_document_organization");
                });

            modelBuilder.Entity("NetCore.Data.RoleMapDocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_map_document_type");
                });

            modelBuilder.Entity("NetCore.Data.RoleMapRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RightId")
                        .HasColumnName("right_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RightId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_map_right");
                });

            modelBuilder.Entity("NetCore.Data.RoleMapUserInfoOfOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_map_userinfo_organization");
                });

            modelBuilder.Entity("NetCore.Data.SignRequestHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Consent")
                        .HasColumnName("consent")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentCode")
                        .HasColumnName("document_code")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentId")
                        .HasColumnName("document_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HSMAccountId")
                        .HasColumnName("hsm_account_id")
                        .HasColumnType("uuid");

                    b.Property<string>("SignatureBase64")
                        .HasColumnName("signature_base64")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("sign_request_history");
                });

            modelBuilder.Entity("NetCore.Data.SystemApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("system_appliation");
                });

            modelBuilder.Entity("NetCore.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ConnectId")
                        .HasColumnName("connect_id")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .HasColumnName("country_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("uuid");

                    b.Property<string>("DistrictName")
                        .HasColumnName("district_name")
                        .HasColumnType("text");

                    b.Property<int>("EFormConfig")
                        .HasColumnName("eform_config")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("IdentityNumber")
                        .HasColumnName("identity_number")
                        .HasColumnType("text");

                    b.Property<string>("IdentityType")
                        .HasColumnName("identity_type")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproveAutoSign")
                        .HasColumnName("is_approve_auto_sign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnableSmartOTP")
                        .HasColumnName("is_enable_smart_otp")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternalUser")
                        .HasColumnName("is_internal_user")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLock")
                        .HasColumnName("is_lock")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotRequirePINToSign")
                        .HasColumnName("is_not_require_pin_to_sign")
                        .HasColumnType("boolean");

                    b.Property<string>("IssueBy")
                        .HasColumnName("issue_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnName("issue_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IssuerBy")
                        .HasColumnName("issuer_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IssuerDate")
                        .HasColumnName("issuer_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnName("last_activity_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("OU")
                        .HasColumnName("ou")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("password_salt")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PositionName")
                        .HasColumnName("position_name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("uuid");

                    b.Property<string>("ProvinceName")
                        .HasColumnName("province_name")
                        .HasColumnType("text");

                    b.Property<int?>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("SubjectDN")
                        .HasColumnName("subject_dn")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserEFormInfoJson")
                        .HasColumnName("user_eform_info_json")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("UserPIN")
                        .HasColumnName("user_pin")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("NetCore.Data.UserHSMAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccountType")
                        .HasColumnName("account_type")
                        .HasColumnType("integer");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CSR")
                        .HasColumnName("csr")
                        .HasColumnType("text");

                    b.Property<string>("CertificateBase64")
                        .HasColumnName("certificate_base64")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("PublicKey")
                        .HasColumnName("public_key")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("SubjectDN")
                        .HasColumnName("subject_dn")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserPIN")
                        .HasColumnName("user_pin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnName("valid_from")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnName("valid_to")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_hsm_account");
                });

            modelBuilder.Entity("NetCore.Data.UserMapDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<string>("DeviceName")
                        .HasColumnName("device_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsIdentifierDevice")
                        .HasColumnName("isIdentifierDevice")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("user_map_device");
                });

            modelBuilder.Entity("NetCore.Data.UserMapFirebaseToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<string>("FirebaseToken")
                        .HasColumnName("firebase_token")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("user_map_firebase_token");
                });

            modelBuilder.Entity("NetCore.Data.UserMapRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_map_role");
                });

            modelBuilder.Entity("NetCore.Data.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsOrgAdmin")
                        .HasColumnName("is_org_admin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnName("is_system_admin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUser")
                        .HasColumnName("is_user")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("NetCore.Data.UserSignConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("AppearenceSignType")
                        .IsRequired()
                        .HasColumnName("appearance_sign_type")
                        .HasColumnType("text");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<long>("IdentityNumber")
                        .HasColumnName("identity_number")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageFileBase64")
                        .HasColumnName("image_file_base64")
                        .HasColumnType("text");

                    b.Property<bool>("IsSignDefault")
                        .HasColumnName("is_sign_default")
                        .HasColumnType("boolean");

                    b.Property<string>("ListSignInfoJson")
                        .HasColumnName("list_sign_info_json")
                        .HasColumnType("text");

                    b.Property<string>("LogoFileBase64")
                        .HasColumnName("logo_file_base64")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<float>("ScaleImage")
                        .HasColumnName("scale_image")
                        .HasColumnType("real");

                    b.Property<float>("ScaleLogo")
                        .HasColumnName("scale_logo")
                        .HasColumnType("real");

                    b.Property<float>("ScaleText")
                        .HasColumnName("scale_text")
                        .HasColumnType("real");

                    b.Property<bool>("SignAppearanceImage")
                        .HasColumnName("sign_appearance_image")
                        .HasColumnType("boolean");

                    b.Property<bool>("SignAppearanceLogo")
                        .HasColumnName("sign_appearance_logo")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_sign_config");
                });

            modelBuilder.Entity("NetCore.Data.VSMSSendQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsPush")
                        .HasColumnName("is_push")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<string>("SendSMSResponseJson")
                        .HasColumnName("send_sms_response_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnName("sent_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SourceAddr")
                        .HasColumnName("source_addr")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("vsms_send_queue");
                });

            modelBuilder.Entity("NetCore.Data.Ward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnName("disctrict_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("ward");
                });

            modelBuilder.Entity("NetCore.Data.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid")
                        .HasMaxLength(128);

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("workflow");
                });

            modelBuilder.Entity("NetCore.Data.WorkflowState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("NameForReject")
                        .IsRequired()
                        .HasColumnName("name_for_reject")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("workflow_state");
                });

            modelBuilder.Entity("NetCore.Data.WorkflowStepExpireNotify", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("EmailBodyTemplate")
                        .HasColumnName("email_body_template")
                        .HasColumnType("text");

                    b.Property<string>("EmailTitleTemplate")
                        .HasColumnName("email_title_template")
                        .HasColumnType("text");

                    b.Property<bool>("IsSendEmail")
                        .HasColumnName("is_send_email")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendNotification")
                        .HasColumnName("is_send_notification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendSMS")
                        .HasColumnName("is_send_sms")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("NotificationBodyTemplate")
                        .HasColumnName("notification_body_template")
                        .HasColumnType("text");

                    b.Property<string>("NotificationTitleTemplate")
                        .HasColumnName("notification_title_template")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("SMSTemplate")
                        .HasColumnName("sms_template")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("TimeSendNotify")
                        .HasColumnName("time_send_notify")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("workflow_step_expire_notify");
                });

            modelBuilder.Entity("NetCore.Data.WorkflowStepRemindNotify", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnName("created_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("DaySendNotiBefore")
                        .HasColumnName("day_send_noti_before")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("EmailBodyTemplate")
                        .HasColumnName("email_body_template")
                        .HasColumnType("text");

                    b.Property<string>("EmailTitleTemplate")
                        .HasColumnName("email_title_template")
                        .HasColumnType("text");

                    b.Property<bool>("IsRepeat")
                        .HasColumnName("is_repeate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendEmail")
                        .HasColumnName("is_send_email")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendNotification")
                        .HasColumnName("is_send_notification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendSMS")
                        .HasColumnName("is_send_sms")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnName("modified_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("NotificationBodyTemplate")
                        .HasColumnName("notification_body_template")
                        .HasColumnType("text");

                    b.Property<string>("NotificationTitleTemplate")
                        .HasColumnName("notification_title_template")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("uuid");

                    b.Property<string>("SMSTemplate")
                        .HasColumnName("sms_template")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("TimeSendNotify")
                        .HasColumnName("time_send_notify")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("workflow_step_remind_notify");
                });

            modelBuilder.Entity("NetCore.Data.WorkflowUserSign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ADSSProfileName")
                        .HasColumnName("adss_profile_name")
                        .HasColumnType("text");

                    b.Property<string>("ConsentSignConfigJson")
                        .HasColumnName("consent_sign_config_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAutoSign")
                        .HasColumnName("is_auto_sign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendMailNotiResult")
                        .HasColumnName("is_send_mail_noti_result")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendMailNotiSign")
                        .HasColumnName("is_send_mail_noti_sign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendNotiSignedFor3rdApp")
                        .HasColumnName("is_send_noti_signed_for_3rd_app")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendOTPNotiSign")
                        .HasColumnName("is_send_otp_noti_sign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignCertify")
                        .HasColumnName("is_sign_certify")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignLTV")
                        .HasColumnName("is_sign_ltv")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignTSA")
                        .HasColumnName("is_sign_tsa")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("NotifyConfigExpireId")
                        .HasColumnName("notify_config_expire_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NotifyConfigRemindId")
                        .HasColumnName("notify_config_remind_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<int?>("SignExpireAfterDay")
                        .HasColumnName("sign_expire_after_day")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("StateId")
                        .HasColumnName("state_id")
                        .HasColumnType("uuid");

                    b.Property<string>("StateName")
                        .HasColumnName("state_name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnName("workflow_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotifyConfigExpireId");

                    b.HasIndex("NotifyConfigRemindId");

                    b.HasIndex("StateId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("workflow_user_sign");
                });

            modelBuilder.Entity("NetCore.Data.District", b =>
                {
                    b.HasOne("NetCore.Data.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("NetCore.Data.Document", b =>
                {
                    b.HasOne("NetCore.Data.DocumentBatch", "DocumentBatch")
                        .WithMany()
                        .HasForeignKey("DocumentBatchId");

                    b.HasOne("NetCore.Data.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("NetCore.Data.WorkflowState", "WorkflowState")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("NetCore.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NetCore.Data.DocumentBatch", b =>
                {
                    b.HasOne("NetCore.Data.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");
                });

            modelBuilder.Entity("NetCore.Data.DocumentBatchFile", b =>
                {
                    b.HasOne("NetCore.Data.DocumentBatch", "DocumentBatch")
                        .WithMany()
                        .HasForeignKey("DocumentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.DocumentFileTemplate", "DocumentFileTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentFileTemplateId");
                });

            modelBuilder.Entity("NetCore.Data.DocumentFile", b =>
                {
                    b.HasOne("NetCore.Data.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.DocumentFileTemplate", b =>
                {
                    b.HasOne("NetCore.Data.DocumentTemplate", "DocumentTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.DocumentMetaDataConfig", b =>
                {
                    b.HasOne("NetCore.Data.DocumentTemplate", "DocumentTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.MetaData", "MetaData")
                        .WithMany()
                        .HasForeignKey("MetaDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.DocumentNotifySchedule", b =>
                {
                    b.HasOne("NetCore.Data.NotifyConfig", "NotifyConfigExpire")
                        .WithMany()
                        .HasForeignKey("NotifyConfigExpireId");

                    b.HasOne("NetCore.Data.NotifyConfig", "NotifyConfigRemind")
                        .WithMany()
                        .HasForeignKey("NotifyConfigRemindId");

                    b.HasOne("NetCore.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.DocumentTemplate", b =>
                {
                    b.HasOne("NetCore.Data.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.DocumentWorkflowHistory", b =>
                {
                    b.HasOne("NetCore.Data.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.NavigationMapRole", b =>
                {
                    b.HasOne("NetCore.Data.Navigation", "Navigation")
                        .WithMany()
                        .HasForeignKey("NavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.Organization", b =>
                {
                    b.HasOne("NetCore.Data.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId");
                });

            modelBuilder.Entity("NetCore.Data.Province", b =>
                {
                    b.HasOne("NetCore.Data.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("NetCore.Data.QueueSendEmail", b =>
                {
                    b.HasOne("NetCore.Data.EmailAccount", "EmailAccount")
                        .WithMany("QueueSendEmails")
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.Role", b =>
                {
                    b.HasOne("NetCore.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.RoleMapDocumentOfOrganization", b =>
                {
                    b.HasOne("NetCore.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.RoleMapDocumentType", b =>
                {
                    b.HasOne("NetCore.Data.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.RoleMapRight", b =>
                {
                    b.HasOne("NetCore.Data.Right", "Right")
                        .WithMany()
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.RoleMapUserInfoOfOrganization", b =>
                {
                    b.HasOne("NetCore.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.User", b =>
                {
                    b.HasOne("NetCore.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("NetCore.Data.UserHSMAccount", b =>
                {
                    b.HasOne("NetCore.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.UserMapRole", b =>
                {
                    b.HasOne("NetCore.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCore.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.UserSignConfig", b =>
                {
                    b.HasOne("NetCore.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetCore.Data.Ward", b =>
                {
                    b.HasOne("NetCore.Data.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("NetCore.Data.WorkflowUserSign", b =>
                {
                    b.HasOne("NetCore.Data.NotifyConfig", "NotifyConfigExpire")
                        .WithMany()
                        .HasForeignKey("NotifyConfigExpireId");

                    b.HasOne("NetCore.Data.NotifyConfig", "NotifyConfigRemind")
                        .WithMany()
                        .HasForeignKey("NotifyConfigRemindId");

                    b.HasOne("NetCore.Data.WorkflowState", "WorkflowState")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("NetCore.Data.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
